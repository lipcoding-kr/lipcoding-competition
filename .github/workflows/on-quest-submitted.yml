name: On Issue Submitted

on:
  issues:
    types:
      - opened
  workflow_dispatch:
    inputs:
      issue-number:
        description: "Issue number"
        required: true

permissions:
  contents: read
  id-token: write
  issues: write
  pull-requests: write

jobs:
  verify-issue:
    name: "Verify Issue Submitted"

    runs-on: ubuntu-latest

    steps:
      - name: Check event payload - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: pwsh
        run: |
          $eventPayload = '${{ toJson(github) }}'
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force

      - name: Check event payload - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $eventPayload = gh api /repos/${{ github.repository }}/issues/${{ github.event.inputs.issue-number }}
          $eventPayload | Out-File -FilePath ${{github.workspace}}/payload.json -Force

      - name: Install Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'

      - name: Install node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'

      - name: Install Java
        uses: actions/setup-java@v4
        with:
          distribution: 'microsoft'
          java-version: '21'

      - name: Install .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.x'

      - name: Checkout quest checker repository
        uses: actions/checkout@v4
        with:
          repository: lipcoding-kr/lipcoding-competition-tests
          path: quest-checker
          token: ${{ secrets.GH_PAT }}

      - name: Verify issue - from issue
        if: |
          github.event_name != 'workflow_dispatch'
        shell: bash
        run: |
          cd quest-checker
          dotnet run --project ./LipCoding.IssueVerificationApp -- \
            --input "${{ github.workspace }}/payload.json" \
            --output "${{ github.workspace }}/issue.json" \
            --due-date "${{ vars.DUE_DATE }}"

      - name: Verify issue - from workflow_dispatch
        if: |
          github.event_name == 'workflow_dispatch'
        shell: bash
        run: |
          cd quest-checker
          dotnet run --project ./LipCoding.IssueVerificationApp -- \
            --input "${{ github.workspace }}/payload.json" \
            --output "${{ github.workspace }}/issue.json" \
            --due-date "${{ vars.DUE_DATE }}" \
            --workflow-dispatch

      - name: Check validation result
        id: issue
        shell: pwsh
        run: |
          $result = Get-Content "${{ github.workspace }}/issue.json" | ConvertFrom-Json

          $tzi = [TimeZoneInfo]::FindSystemTimeZoneById("Asia/Seoul")

          echo "issueNumber=$($result.number)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "githubId=$($result.createdBy)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "submittedAt=$([TimeZoneInfo]::ConvertTime($result.createdAt, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "dueBy=$([TimeZoneInfo]::ConvertTime($result.dueDate, $tzi).ToString("yyyy-MM-dd HH:mm:ss.fff") + " +09:00")" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "githubId=$($result.createdBy)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "isValid=$($result.isValid)" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append
          echo "invalidReasons=$('<ul><li> ' + $($result.invalidReasons -join '</li><li> ') + '</li></ul>')" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf-8 -Append

      - name: Add a label - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue edit ${{ steps.issue.outputs.issueNumber }} \
            --add-label "invalid" \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          body: |
            üëãüèº @${{ steps.issue.outputs.githubId }} Îãò!

            Ïï±ÏùÑ Ï†úÏ∂úÌï¥ Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§! üéâ

            - Ïï± Ï†úÏ∂ú ÏãúÍ∞Å: ${{ steps.issue.outputs.submittedAt }}
            - Ïï± Ï†úÏ∂ú ÎßàÍ∞ê ÏãúÍ∞Å: ${{ steps.issue.outputs.dueBy }}

            ÌïòÏßÄÎßå Ï†úÏ∂úÌïòÏã† Ïï±ÏùÄ Îã§ÏùåÍ≥º Í∞ôÏùÄ Ïù¥Ïú†Î°ú Ïù∏Ìï¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. üò¢

            ${{ steps.issue.outputs.invalidReasons }}

      - name: Close issue - Invalid
        if: |
          steps.issue.outputs.isValid == 'false'
        shell: bash
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh issue close ${{ steps.issue.outputs.issueNumber }} \
            -c "Ï†úÏ∂úÌïú Ïï±Ïù¥ Ïú†Ìö®ÌïòÏßÄ ÏïäÏäµÎãàÎã§. Ïù¥ÏäàÎ•º Îã´ÏäµÎãàÎã§." \
            -R ${{ github.event.repository.full_name }}

      - name: Comment to issue - Acknowledge
        if: |
          steps.issue.outputs.isValid == 'true'
        uses: actions-cool/issues-helper@v3
        with:
          actions: "create-comment"
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ steps.issue.outputs.issueNumber }}
          emoji: "+1,rocket"
          body: |
            üëãüèº @${{ steps.issue.outputs.githubId }} Îãò!

            Ïï±ÏùÑ Ï†úÏ∂úÌï¥ Ï£ºÏÖîÏÑú Í∞êÏÇ¨Ìï©ÎãàÎã§! üéâ

            - Ïï± Ï†úÏ∂ú ÏãúÍ∞Å: ${{ steps.issue.outputs.submittedAt }}
            - Ïï± Ï†úÏ∂ú ÎßàÍ∞ê ÏãúÍ∞Å: ${{ steps.issue.outputs.dueBy }}

            Ï†úÏ∂úÌïòÏã† Ïï±ÏùÄ ÌòÑÏû¨ ÌôïÏù∏ Ï§ëÏù¥Î©∞, ÏôÑÎ£å Ïó¨Î∂ÄÎ•º ÌôïÏù∏Ìïú ÌõÑ Îã§Ïãú ÏïåÎ†§ÎìúÎ¶¨Í≤†ÏäµÎãàÎã§.
            
            > **Ï∞∏Í≥†**: Ï†úÏ∂úÌïòÏã† Ïï±Ïùò Í∑úÎ™®Ïóê Îî∞Îùº ÌÖåÏä§Ìä∏Î•º Í±∞Ï≥ê ÌôïÏù∏ÌïòÎäî Îç∞ ÏãúÍ∞ÑÏù¥ Í±∏Î¶¥ Ïàò ÏûàÏäµÎãàÎã§. ‚è≥

      - name: Upload issue payload
        if: |
          steps.issue.outputs.isValid == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: issue-payload
          path: '${{ github.workspace }}/issue.json'

  test-apps:
    name: "Test App Submitted"

    needs:
      - verify-issue

    runs-on: ubuntu-latest

    steps:
      - name: Download issue payload
        uses: actions/download-artifact@v4
        with:
          name: issue-payload

      - name: Check validation result
        id: issue
        shell: pwsh
        run: |
          Get-Content "${{ github.workspace }}/issue.json"
